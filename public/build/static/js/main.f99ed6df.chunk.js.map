{"version":3,"sources":["Signup.js","Home.js","App.js","reportWebVitals.js","index.js"],"names":["Signup","setUser","useState","username","setUsername","password","setPassword","errors","setErrors","history","useNavigate","map","e","onSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","then","r","ok","json","console","log","type","name","placeholder","value","onChange","target","Home","to","App","className","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAkDeA,EA9CA,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACb,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACMC,EAAUC,cA0BhB,OACI,6BACKH,GAAUA,EAAOI,KAAI,SAAAC,GAAC,OAAI,2BAAIA,MACnC,0BAAMC,SA3Ba,SAACD,GACpBA,EAAEE,iBACFC,MAAM,UAAW,CACbC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAACjB,WAAUE,eAEnCgB,MAAK,SAAAC,GACCA,EAAEC,GACDD,EAAEE,OAAOH,MAAK,SAAAC,GACVrB,EAAQqB,GACRb,EAAQ,QAIZa,EAAEE,OAAOH,MAAK,SAAAC,GACVG,QAAQC,IAAI,SAAUJ,GACtBd,EAAUc,EAAEf,gBASpB,2BAAOoB,KAAK,OAAOC,KAAK,WAAWC,YAAY,sBAAsBC,MAAO3B,EAAU4B,SAAU,SAACnB,GAAD,OAAOR,EAAYQ,EAAEoB,OAAOF,UAC5H,6BACA,2BAAOH,KAAK,OAAOC,KAAK,WAAWC,YAAY,sBAAsBC,MAAOzB,EAAU0B,SAAU,SAACnB,GAAD,OAAON,EAAYM,EAAEoB,OAAOF,UAC5H,6BACA,2BAAOH,KAAK,SAASG,MAAM,c,OC/BxBG,MARf,WACI,OACI,6BACI,kBAAC,IAAD,CAAMC,GAAG,WAAT,YCyEGC,MAzEf,WACE,MAAwBjC,mBAAS,IAAjC,mBAAaD,GAAb,WA6CA,OACE,yBAAKmC,UAAU,OACb,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UAAUC,QAAS,kBAAC,EAAD,CAAQrC,QAASA,MAChD,kBAAC,IAAD,CAAOoC,KAAK,IAAIC,QAAS,kBAAC,EAAD,YC7CtBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f99ed6df.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport {useNavigate} from 'react-router-dom'\n\n\nconst Signup = ({setUser}) => {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [errors, setErrors] = useState([])\n    const history = useNavigate()\n    \n    const handleOnSubmit = (e) => {\n        e.preventDefault()\n        fetch(\"/signup\", {\n            method: \"POST\", \n            headers: {\n                \"Content-type\": \"application/json\"\n            }, \n            body: JSON.stringify({username, password})\n        })\n        .then(r => {\n            if(r.ok) {\n                r.json().then(r => {\n                    setUser(r)\n                    history(\"/\")\n                })\n            } else {\n                // ! check to make sure this is correct\n                r.json().then(r => {\n                    console.log(\"errors\", r)\n                    setErrors(r.errors)\n                })\n            }\n        })\n    }\n    return(\n        <div>\n            {errors && errors.map(e => <p>{e}</p>)}\n        <form onSubmit={handleOnSubmit}>\n            <input type=\"text\" name=\"username\" placeholder=\"Enter your Username\" value={username} onChange={(e) => setUsername(e.target.value)} />\n            <br />\n            <input type=\"text\" name=\"password\" placeholder=\"Enter your password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n            <br />\n            <input type=\"submit\" value=\"Signup\" />\n        </form>\n        </div>\n    )\n\n\n}\n\nexport default Signup","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nfunction Home() {\n    return (\n        <div>\n            <Link to=\"/signup\">Signup</Link>\n        </div>\n    )\n}\n\nexport default Home\n","import './App.css';\nimport React, { useState} from 'react'\nimport Signup from './Signup'\nimport Home from './Home'\nimport {BrowserRouter as Router, Routes, Route} from 'react-router-dom'\n\nfunction App() {\n  const [user, setUser] = useState({})\n  // const [errors, setErrors] = useState([])\n  // const [name, setName] = useState(\"\")\n  // const [genre, setGenre] = useState(\"\")\n  // const [artists, setArtists] = useState([])\n  // const handleOnSubmit = e => {\n  //   e.preventDefault()\n  //   fetch(\"/artists\", {\n  //     method: \"POST\", \n  //     headers: {\n  //       \"Content-Type\": \"application/json\"\n\n  //     }, \n  //     body: JSON.stringify({\n  //       artist: {\n  //         name, \n  //         genre\n  //       }\n  //     })\n  //   })\n  //   // .then(response => response.json())\n  //   .then(response => {\n  //     if(response.ok) {\n  //       response.json()\n  //       .then(r => {\n  //         setArtists([...artists, r])\n          \n  //       })\n  //     } \n  //     else {\n  //       response.json()\n  //       .then(r => {\n  //         setErrors(r.errors)\n  //       })\n  //     }\n       \n  //   })\n \n  //   .catch(errors => {\n  //     console.log(errors)\n  //   })\n  // }\n\n\n  \n  return (\n    <div className=\"App\">\n      <Router>\n          <Routes>\n            <Route path=\"/signup\" element={<Signup setUser={setUser} />}/>\n            <Route path=\"/\" element={<Home />} />\n            \n          </Routes>\n      </Router>\n      {/* <h3>Add new Artist</h3>\n      <ul>\n      {errors ? errors.map(e => <li>{e}</li>) : null}\n      </ul>\n      <form onSubmit={handleOnSubmit}>\n        <label>Artist name: </label> \n        <input type=\"text\" name=\"name\" onChange={(e) => setName(e.target.value)} value={name}/>\n        <br />\n        <label>Genre: </label> \n        <input type=\"text\" name=\"genre\" onChange={(e) => setGenre(e.target.value)} value={genre}/>\n        <br />\n        <input type=\"submit\" name=\"submit\" />\n      </form>\n      {artists ? artists.map(a => <p>{a.name}</p>) : null} */}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}